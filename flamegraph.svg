<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="799"><g><title>libsystem_malloc.dylib`free (2 samples, 0.25%)</title><rect x="0.0000%" y="245" width="0.2503%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.25%)</title><rect x="0.2503%" y="245" width="0.2503%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.5003%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`close (1 samples, 0.13%)</title><rect x="0.7509%" y="229" width="0.1252%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="1"/><text x="1.0009%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.25%)</title><rect x="0.8761%" y="229" width="0.2503%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="2"/><text x="1.1261%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.63%)</title><rect x="1.1264%" y="229" width="0.6258%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="5"/><text x="1.3764%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.13%)</title><rect x="1.7522%" y="229" width="0.1252%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="1"/><text x="2.0022%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.38%)</title><rect x="1.8773%" y="229" width="0.3755%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="3"/><text x="2.1273%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (6 samples, 0.75%)</title><rect x="2.2528%" y="229" width="0.7509%" height="15" fill="rgb(228,23,34)" fg:x="18" fg:w="6"/><text x="2.5028%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.75%)</title><rect x="2.2528%" y="213" width="0.7509%" height="15" fill="rgb(218,30,26)" fg:x="18" fg:w="6"/><text x="2.5028%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (7 samples, 0.88%)</title><rect x="3.0038%" y="229" width="0.8761%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="7"/><text x="3.2538%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (7 samples, 0.88%)</title><rect x="3.0038%" y="213" width="0.8761%" height="15" fill="rgb(250,228,42)" fg:x="24" fg:w="7"/><text x="3.2538%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.88%)</title><rect x="3.0038%" y="197" width="0.8761%" height="15" fill="rgb(240,193,28)" fg:x="24" fg:w="7"/><text x="3.2538%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.25%)</title><rect x="3.8798%" y="229" width="0.2503%" height="15" fill="rgb(216,20,37)" fg:x="31" fg:w="2"/><text x="4.1298%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.13%)</title><rect x="4.1302%" y="229" width="0.1252%" height="15" fill="rgb(206,188,39)" fg:x="33" fg:w="1"/><text x="4.3802%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.13%)</title><rect x="4.2553%" y="229" width="0.1252%" height="15" fill="rgb(217,207,13)" fg:x="34" fg:w="1"/><text x="4.5053%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="5.0063%" y="213" width="0.1252%" height="15" fill="rgb(231,73,38)" fg:x="40" fg:w="1"/><text x="5.2563%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.13%)</title><rect x="5.1314%" y="213" width="0.1252%" height="15" fill="rgb(225,20,46)" fg:x="41" fg:w="1"/><text x="5.3814%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.13%)</title><rect x="5.2566%" y="213" width="0.1252%" height="15" fill="rgb(210,31,41)" fg:x="42" fg:w="1"/><text x="5.5066%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.13%)</title><rect x="5.2566%" y="197" width="0.1252%" height="15" fill="rgb(221,200,47)" fg:x="42" fg:w="1"/><text x="5.5066%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.13%)</title><rect x="5.2566%" y="181" width="0.1252%" height="15" fill="rgb(226,26,5)" fg:x="42" fg:w="1"/><text x="5.5066%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.13%)</title><rect x="5.3817%" y="213" width="0.1252%" height="15" fill="rgb(249,33,26)" fg:x="43" fg:w="1"/><text x="5.6317%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.50%)</title><rect x="5.5069%" y="213" width="0.5006%" height="15" fill="rgb(235,183,28)" fg:x="44" fg:w="4"/><text x="5.7569%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 1.13%)</title><rect x="6.0075%" y="213" width="1.1264%" height="15" fill="rgb(221,5,38)" fg:x="48" fg:w="9"/><text x="6.2575%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.13%)</title><rect x="7.1339%" y="213" width="0.1252%" height="15" fill="rgb(247,18,42)" fg:x="57" fg:w="1"/><text x="7.3839%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.75%)</title><rect x="7.6345%" y="197" width="0.7509%" height="15" fill="rgb(241,131,45)" fg:x="61" fg:w="6"/><text x="7.8845%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.63%)</title><rect x="8.3855%" y="181" width="0.6258%" height="15" fill="rgb(249,31,29)" fg:x="67" fg:w="5"/><text x="8.6355%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.13%)</title><rect x="9.0113%" y="181" width="0.1252%" height="15" fill="rgb(225,111,53)" fg:x="72" fg:w="1"/><text x="9.2613%" y="191.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$__error (2 samples, 0.25%)</title><rect x="9.3867%" y="165" width="0.2503%" height="15" fill="rgb(238,160,17)" fg:x="75" fg:w="2"/><text x="9.6367%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.13%)</title><rect x="9.7622%" y="133" width="0.1252%" height="15" fill="rgb(214,148,48)" fg:x="78" fg:w="1"/><text x="10.0122%" y="143.50"></text></g><g><title>libsystem_c.dylib`_readdir_unlocked (3 samples, 0.38%)</title><rect x="9.6370%" y="149" width="0.3755%" height="15" fill="rgb(232,36,49)" fg:x="77" fg:w="3"/><text x="9.8870%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="9.8874%" y="133" width="0.1252%" height="15" fill="rgb(209,103,24)" fg:x="79" fg:w="1"/><text x="10.1374%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.13%)</title><rect x="9.8874%" y="117" width="0.1252%" height="15" fill="rgb(229,88,8)" fg:x="79" fg:w="1"/><text x="10.1374%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (210 samples, 26.28%)</title><rect x="10.0125%" y="149" width="26.2829%" height="15" fill="rgb(213,181,19)" fg:x="80" fg:w="210"/><text x="10.2625%" y="159.50">libsystem_kernel.dylib`__getdirentries64</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.13%)</title><rect x="36.2954%" y="149" width="0.1252%" height="15" fill="rgb(254,191,54)" fg:x="290" fg:w="1"/><text x="36.5454%" y="159.50"></text></g><g><title>libsystem_c.dylib`readdir_r (215 samples, 26.91%)</title><rect x="9.6370%" y="165" width="26.9086%" height="15" fill="rgb(241,83,37)" fg:x="77" fg:w="215"/><text x="9.8870%" y="175.50">libsystem_c.dylib`readdir_r</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.13%)</title><rect x="36.4205%" y="149" width="0.1252%" height="15" fill="rgb(233,36,39)" fg:x="291" fg:w="1"/><text x="36.6705%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__error (2 samples, 0.25%)</title><rect x="36.5457%" y="165" width="0.2503%" height="15" fill="rgb(226,3,54)" fg:x="292" fg:w="2"/><text x="36.7957%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.50%)</title><rect x="36.7960%" y="165" width="0.5006%" height="15" fill="rgb(245,192,40)" fg:x="294" fg:w="4"/><text x="37.0460%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.13%)</title><rect x="37.2966%" y="165" width="0.1252%" height="15" fill="rgb(238,167,29)" fg:x="298" fg:w="1"/><text x="37.5466%" y="175.50"></text></g><g><title>victory-archive`&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (233 samples, 29.16%)</title><rect x="8.3855%" y="197" width="29.1615%" height="15" fill="rgb(232,182,51)" fg:x="67" fg:w="233"/><text x="8.6355%" y="207.50">victory-archive`&lt;std::fs::ReadDir as core::iter..</text></g><g><title>victory-archive`&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (227 samples, 28.41%)</title><rect x="9.1364%" y="181" width="28.4105%" height="15" fill="rgb(231,60,39)" fg:x="73" fg:w="227"/><text x="9.3864%" y="191.50">victory-archive`&lt;std::sys::unix::fs::ReadDir a..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_lock_init_slow (1 samples, 0.13%)</title><rect x="37.4218%" y="165" width="0.1252%" height="15" fill="rgb(208,69,12)" fg:x="299" fg:w="1"/><text x="37.6718%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.13%)</title><rect x="37.7972%" y="165" width="0.1252%" height="15" fill="rgb(235,93,37)" fg:x="302" fg:w="1"/><text x="38.0472%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.25%)</title><rect x="37.9224%" y="165" width="0.2503%" height="15" fill="rgb(213,116,39)" fg:x="303" fg:w="2"/><text x="38.1724%" y="175.50"></text></g><g><title>victory-archive`DYLD-STUB$$malloc (1 samples, 0.13%)</title><rect x="38.1727%" y="165" width="0.1252%" height="15" fill="rgb(222,207,29)" fg:x="305" fg:w="1"/><text x="38.4227%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.13%)</title><rect x="38.4230%" y="117" width="0.1252%" height="15" fill="rgb(206,96,30)" fg:x="307" fg:w="1"/><text x="38.6730%" y="127.50"></text></g><g><title>libsystem_c.dylib`__opendir_common (3 samples, 0.38%)</title><rect x="38.2979%" y="133" width="0.3755%" height="15" fill="rgb(218,138,4)" fg:x="306" fg:w="3"/><text x="38.5479%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="38.5482%" y="117" width="0.1252%" height="15" fill="rgb(250,191,14)" fg:x="308" fg:w="1"/><text x="38.7982%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.13%)</title><rect x="38.5482%" y="101" width="0.1252%" height="15" fill="rgb(239,60,40)" fg:x="308" fg:w="1"/><text x="38.7982%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__open_nocancel (348 samples, 43.55%)</title><rect x="38.6733%" y="133" width="43.5544%" height="15" fill="rgb(206,27,48)" fg:x="309" fg:w="348"/><text x="38.9233%" y="143.50">libsystem_kernel.dylib`__open_nocancel</text></g><g><title>victory-archive`walkdir::IntoIter::handle_entry (382 samples, 47.81%)</title><rect x="37.5469%" y="197" width="47.8098%" height="15" fill="rgb(225,35,8)" fg:x="300" fg:w="382"/><text x="37.7969%" y="207.50">victory-archive`walkdir::IntoIter::handle_entry</text></g><g><title>victory-archive`walkdir::IntoIter::push (381 samples, 47.68%)</title><rect x="37.6721%" y="181" width="47.6846%" height="15" fill="rgb(250,213,24)" fg:x="301" fg:w="381"/><text x="37.9221%" y="191.50">victory-archive`walkdir::IntoIter::push</text></g><g><title>victory-archive`std::sys::unix::fs::readdir (376 samples, 47.06%)</title><rect x="38.2979%" y="165" width="47.0588%" height="15" fill="rgb(247,123,22)" fg:x="306" fg:w="376"/><text x="38.5479%" y="175.50">victory-archive`std::sys::unix::fs::readdir</text></g><g><title>libsystem_c.dylib`__opendir2 (376 samples, 47.06%)</title><rect x="38.2979%" y="149" width="47.0588%" height="15" fill="rgb(231,138,38)" fg:x="306" fg:w="376"/><text x="38.5479%" y="159.50">libsystem_c.dylib`__opendir2</text></g><g><title>libsystem_kernel.dylib`fstatfs (25 samples, 3.13%)</title><rect x="82.2278%" y="133" width="3.1289%" height="15" fill="rgb(231,145,46)" fg:x="657" fg:w="25"/><text x="82.4778%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.13%)</title><rect x="85.3567%" y="181" width="0.1252%" height="15" fill="rgb(251,118,11)" fg:x="682" fg:w="1"/><text x="85.6067%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.13%)</title><rect x="85.4819%" y="181" width="0.1252%" height="15" fill="rgb(217,147,25)" fg:x="683" fg:w="1"/><text x="85.7319%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (17 samples, 2.13%)</title><rect x="85.6070%" y="165" width="2.1277%" height="15" fill="rgb(247,81,37)" fg:x="684" fg:w="17"/><text x="85.8570%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.13%)</title><rect x="87.7347%" y="165" width="0.1252%" height="15" fill="rgb(209,12,38)" fg:x="701" fg:w="1"/><text x="87.9847%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.13%)</title><rect x="87.7347%" y="149" width="0.1252%" height="15" fill="rgb(227,1,9)" fg:x="701" fg:w="1"/><text x="87.9847%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.13%)</title><rect x="87.7347%" y="133" width="0.1252%" height="15" fill="rgb(248,47,43)" fg:x="701" fg:w="1"/><text x="87.9847%" y="143.50"></text></g><g><title>victory-archive`walkdir::IntoIter::pop (21 samples, 2.63%)</title><rect x="85.3567%" y="197" width="2.6283%" height="15" fill="rgb(221,10,30)" fg:x="682" fg:w="21"/><text x="85.6067%" y="207.50">vi..</text></g><g><title>victory-archive`alloc::sync::Arc&lt;T&gt;::drop_slow (19 samples, 2.38%)</title><rect x="85.6070%" y="181" width="2.3780%" height="15" fill="rgb(210,229,1)" fg:x="684" fg:w="19"/><text x="85.8570%" y="191.50">vi..</text></g><g><title>victory-archive`&lt;std::sys::unix::fs::Dir as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="87.8598%" y="165" width="0.1252%" height="15" fill="rgb(222,148,37)" fg:x="702" fg:w="1"/><text x="88.1098%" y="175.50"></text></g><g><title>libsystem_c.dylib`closedir (1 samples, 0.13%)</title><rect x="87.8598%" y="149" width="0.1252%" height="15" fill="rgb(234,67,33)" fg:x="702" fg:w="1"/><text x="88.1098%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.13%)</title><rect x="87.8598%" y="133" width="0.1252%" height="15" fill="rgb(247,98,35)" fg:x="702" fg:w="1"/><text x="88.1098%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.38%)</title><rect x="87.9850%" y="181" width="0.3755%" height="15" fill="rgb(247,138,52)" fg:x="703" fg:w="3"/><text x="88.2350%" y="191.50"></text></g><g><title>victory-archive`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.13%)</title><rect x="88.3605%" y="181" width="0.1252%" height="15" fill="rgb(213,79,30)" fg:x="706" fg:w="1"/><text x="88.6105%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.13%)</title><rect x="88.4856%" y="165" width="0.1252%" height="15" fill="rgb(246,177,23)" fg:x="707" fg:w="1"/><text x="88.7356%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.13%)</title><rect x="88.7359%" y="117" width="0.1252%" height="15" fill="rgb(230,62,27)" fg:x="709" fg:w="1"/><text x="88.9859%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.13%)</title><rect x="88.8611%" y="85" width="0.1252%" height="15" fill="rgb(216,154,8)" fg:x="710" fg:w="1"/><text x="89.1111%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.13%)</title><rect x="88.9862%" y="85" width="0.1252%" height="15" fill="rgb(244,35,45)" fg:x="711" fg:w="1"/><text x="89.2362%" y="95.50"></text></g><g><title>victory-archive`&lt;walkdir::IntoIter as core::iter::traits::iterator::Iterator&gt;::next (655 samples, 81.98%)</title><rect x="7.2591%" y="213" width="81.9775%" height="15" fill="rgb(251,115,12)" fg:x="58" fg:w="655"/><text x="7.5091%" y="223.50">victory-archive`&lt;walkdir::IntoIter as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>victory-archive`walkdir::dent::DirEntry::from_entry (10 samples, 1.25%)</title><rect x="87.9850%" y="197" width="1.2516%" height="15" fill="rgb(240,54,50)" fg:x="703" fg:w="10"/><text x="88.2350%" y="207.50"></text></g><g><title>victory-archive`std::path::Path::_join (6 samples, 0.75%)</title><rect x="88.4856%" y="181" width="0.7509%" height="15" fill="rgb(233,84,52)" fg:x="707" fg:w="6"/><text x="88.7356%" y="191.50"></text></g><g><title>victory-archive`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.63%)</title><rect x="88.6108%" y="165" width="0.6258%" height="15" fill="rgb(207,117,47)" fg:x="708" fg:w="5"/><text x="88.8608%" y="175.50"></text></g><g><title>victory-archive`alloc::raw_vec::finish_grow (5 samples, 0.63%)</title><rect x="88.6108%" y="149" width="0.6258%" height="15" fill="rgb(249,43,39)" fg:x="708" fg:w="5"/><text x="88.8608%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.63%)</title><rect x="88.6108%" y="133" width="0.6258%" height="15" fill="rgb(209,38,44)" fg:x="708" fg:w="5"/><text x="88.8608%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.38%)</title><rect x="88.8611%" y="117" width="0.3755%" height="15" fill="rgb(236,212,23)" fg:x="710" fg:w="3"/><text x="89.1111%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.38%)</title><rect x="88.8611%" y="101" width="0.3755%" height="15" fill="rgb(242,79,21)" fg:x="710" fg:w="3"/><text x="89.1111%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.13%)</title><rect x="89.1114%" y="85" width="0.1252%" height="15" fill="rgb(211,96,35)" fg:x="712" fg:w="1"/><text x="89.3614%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.13%)</title><rect x="89.1114%" y="69" width="0.1252%" height="15" fill="rgb(253,215,40)" fg:x="712" fg:w="1"/><text x="89.3614%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.13%)</title><rect x="89.1114%" y="53" width="0.1252%" height="15" fill="rgb(211,81,21)" fg:x="712" fg:w="1"/><text x="89.3614%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.13%)</title><rect x="89.1114%" y="37" width="0.1252%" height="15" fill="rgb(208,190,38)" fg:x="712" fg:w="1"/><text x="89.3614%" y="47.50"></text></g><g><title>victory-archive`core::iter::traits::iterator::Iterator::fold (1 samples, 0.13%)</title><rect x="89.2365%" y="213" width="0.1252%" height="15" fill="rgb(235,213,38)" fg:x="713" fg:w="1"/><text x="89.4865%" y="223.50"></text></g><g><title>victory-archive`core::str::converts::from_utf8 (4 samples, 0.50%)</title><rect x="89.3617%" y="213" width="0.5006%" height="15" fill="rgb(237,122,38)" fg:x="714" fg:w="4"/><text x="89.6117%" y="223.50"></text></g><g><title>victory-archive`std::sys::unix::os_str::Slice::to_str (2 samples, 0.25%)</title><rect x="89.8623%" y="213" width="0.2503%" height="15" fill="rgb(244,218,35)" fg:x="718" fg:w="2"/><text x="90.1123%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.13%)</title><rect x="90.4881%" y="197" width="0.1252%" height="15" fill="rgb(240,68,47)" fg:x="723" fg:w="1"/><text x="90.7381%" y="207.50"></text></g><g><title>victory-archive`core::iter::traits::iterator::Iterator::fold (48 samples, 6.01%)</title><rect x="90.6133%" y="197" width="6.0075%" height="15" fill="rgb(210,16,53)" fg:x="724" fg:w="48"/><text x="90.8633%" y="207.50">victory-..</text></g><g><title>victory-archive`victory_archive::file::VictoryFile::new (55 samples, 6.88%)</title><rect x="90.1126%" y="213" width="6.8836%" height="15" fill="rgb(235,124,12)" fg:x="720" fg:w="55"/><text x="90.3626%" y="223.50">victory-a..</text></g><g><title>victory-archive`core::str::pattern::StrSearcher::new (3 samples, 0.38%)</title><rect x="96.6208%" y="197" width="0.3755%" height="15" fill="rgb(224,169,11)" fg:x="772" fg:w="3"/><text x="96.8708%" y="207.50"></text></g><g><title>victory-archive`&lt;victory_archive::destination::filesystem_dest::FileSystemDestination as victory_archive::destination::Destination&gt;::list_files_next (741 samples, 92.74%)</title><rect x="4.3805%" y="229" width="92.7409%" height="15" fill="rgb(250,166,2)" fg:x="35" fg:w="741"/><text x="4.6305%" y="239.50">victory-archive`&lt;victory_archive::destination::filesystem_dest::FileSystemDestination as victory_archive::destination::Destination&gt;::list_files_next</text></g><g><title>victory-archive`walkdir::dent::DirEntry::from_entry (1 samples, 0.13%)</title><rect x="96.9962%" y="213" width="0.1252%" height="15" fill="rgb(242,216,29)" fg:x="775" fg:w="1"/><text x="97.2462%" y="223.50"></text></g><g><title>victory-archive`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.25%)</title><rect x="97.1214%" y="229" width="0.2503%" height="15" fill="rgb(230,116,27)" fg:x="776" fg:w="2"/><text x="97.3714%" y="239.50"></text></g><g><title>victory-archive`alloc::raw_vec::finish_grow (2 samples, 0.25%)</title><rect x="97.1214%" y="213" width="0.2503%" height="15" fill="rgb(228,99,48)" fg:x="776" fg:w="2"/><text x="97.3714%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.25%)</title><rect x="97.1214%" y="197" width="0.2503%" height="15" fill="rgb(253,11,6)" fg:x="776" fg:w="2"/><text x="97.3714%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.25%)</title><rect x="97.1214%" y="181" width="0.2503%" height="15" fill="rgb(247,143,39)" fg:x="776" fg:w="2"/><text x="97.3714%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.25%)</title><rect x="97.1214%" y="165" width="0.2503%" height="15" fill="rgb(236,97,10)" fg:x="776" fg:w="2"/><text x="97.3714%" y="175.50"></text></g><g><title>victory-archive`log::__private_api_log (1 samples, 0.13%)</title><rect x="97.3717%" y="229" width="0.1252%" height="15" fill="rgb(233,208,19)" fg:x="778" fg:w="1"/><text x="97.6217%" y="239.50"></text></g><g><title>victory-archive`&lt;simplelog::loggers::comblog::CombinedLogger as log::Log&gt;::log (1 samples, 0.13%)</title><rect x="97.3717%" y="213" width="0.1252%" height="15" fill="rgb(216,164,2)" fg:x="778" fg:w="1"/><text x="97.6217%" y="223.50"></text></g><g><title>victory-archive`&lt;simplelog::loggers::termlog::TermLogger as log::Log&gt;::log (1 samples, 0.13%)</title><rect x="97.3717%" y="197" width="0.1252%" height="15" fill="rgb(220,129,5)" fg:x="778" fg:w="1"/><text x="97.6217%" y="207.50"></text></g><g><title>victory-archive`simplelog::loggers::logging::write_thread_id (1 samples, 0.13%)</title><rect x="97.3717%" y="181" width="0.1252%" height="15" fill="rgb(242,17,10)" fg:x="778" fg:w="1"/><text x="97.6217%" y="191.50"></text></g><g><title>victory-archive`alloc::fmt::format::format_inner (1 samples, 0.13%)</title><rect x="97.3717%" y="165" width="0.1252%" height="15" fill="rgb(242,107,0)" fg:x="778" fg:w="1"/><text x="97.6217%" y="175.50"></text></g><g><title>victory-archive`core::fmt::write (1 samples, 0.13%)</title><rect x="97.3717%" y="149" width="0.1252%" height="15" fill="rgb(251,28,31)" fg:x="778" fg:w="1"/><text x="97.6217%" y="159.50"></text></g><g><title>victory-archive`&lt;std::thread::ThreadId as core::fmt::Debug&gt;::fmt (1 samples, 0.13%)</title><rect x="97.3717%" y="133" width="0.1252%" height="15" fill="rgb(233,223,10)" fg:x="778" fg:w="1"/><text x="97.6217%" y="143.50"></text></g><g><title>victory-archive`core::fmt::Formatter::debug_tuple_field1_finish (1 samples, 0.13%)</title><rect x="97.3717%" y="117" width="0.1252%" height="15" fill="rgb(215,21,27)" fg:x="778" fg:w="1"/><text x="97.6217%" y="127.50"></text></g><g><title>victory-archive`core::fmt::builders::DebugTuple::field (1 samples, 0.13%)</title><rect x="97.3717%" y="101" width="0.1252%" height="15" fill="rgb(232,23,21)" fg:x="778" fg:w="1"/><text x="97.6217%" y="111.50"></text></g><g><title>victory-archive`&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.13%)</title><rect x="97.3717%" y="85" width="0.1252%" height="15" fill="rgb(244,5,23)" fg:x="778" fg:w="1"/><text x="97.6217%" y="95.50"></text></g><g><title>victory-archive`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.13%)</title><rect x="97.3717%" y="69" width="0.1252%" height="15" fill="rgb(226,81,46)" fg:x="778" fg:w="1"/><text x="97.6217%" y="79.50"></text></g><g><title>victory-archive`std::sys::unix::time::inner::_&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.25%)</title><rect x="97.4969%" y="229" width="0.2503%" height="15" fill="rgb(247,70,30)" fg:x="779" fg:w="2"/><text x="97.7469%" y="239.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (2 samples, 0.25%)</title><rect x="97.4969%" y="213" width="0.2503%" height="15" fill="rgb(212,68,19)" fg:x="779" fg:w="2"/><text x="97.7469%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (1 samples, 0.13%)</title><rect x="97.6220%" y="197" width="0.1252%" height="15" fill="rgb(240,187,13)" fg:x="780" fg:w="1"/><text x="97.8720%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.25%)</title><rect x="97.7472%" y="213" width="0.2503%" height="15" fill="rgb(223,113,26)" fg:x="781" fg:w="2"/><text x="97.9972%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.25%)</title><rect x="97.7472%" y="197" width="0.2503%" height="15" fill="rgb(206,192,2)" fg:x="781" fg:w="2"/><text x="97.9972%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.63%)</title><rect x="97.9975%" y="181" width="0.6258%" height="15" fill="rgb(241,108,4)" fg:x="783" fg:w="5"/><text x="98.2475%" y="191.50"></text></g><g><title>victory-archive`&lt;&amp;mut bincode::ser::Serializer&lt;W,O&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.13%)</title><rect x="98.6233%" y="181" width="0.1252%" height="15" fill="rgb(247,173,49)" fg:x="788" fg:w="1"/><text x="98.8733%" y="191.50"></text></g><g><title>victory-archive`&lt;bincode::ser::Compound&lt;W,O&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.13%)</title><rect x="98.7484%" y="181" width="0.1252%" height="15" fill="rgb(224,114,35)" fg:x="789" fg:w="1"/><text x="98.9984%" y="191.50"></text></g><g><title>victory-archive`bincode::serialize (11 samples, 1.38%)</title><rect x="97.9975%" y="213" width="1.3767%" height="15" fill="rgb(245,159,27)" fg:x="783" fg:w="11"/><text x="98.2475%" y="223.50"></text></g><g><title>victory-archive`serde::ser::Serializer::collect_seq (11 samples, 1.38%)</title><rect x="97.9975%" y="197" width="1.3767%" height="15" fill="rgb(245,172,44)" fg:x="783" fg:w="11"/><text x="98.2475%" y="207.50"></text></g><g><title>victory-archive`victory_archive::file::_::_&lt;impl serde::ser::Serialize for victory_archive::file::VictoryFile&gt;::serialize (4 samples, 0.50%)</title><rect x="98.8736%" y="181" width="0.5006%" height="15" fill="rgb(236,23,11)" fg:x="790" fg:w="4"/><text x="99.1236%" y="191.50"></text></g><g><title>victory-archive`std::fs::File::create (1 samples, 0.13%)</title><rect x="99.3742%" y="213" width="0.1252%" height="15" fill="rgb(205,117,38)" fg:x="794" fg:w="1"/><text x="99.6242%" y="223.50"></text></g><g><title>victory-archive`std::fs::OpenOptions::_open (1 samples, 0.13%)</title><rect x="99.3742%" y="197" width="0.1252%" height="15" fill="rgb(237,72,25)" fg:x="794" fg:w="1"/><text x="99.6242%" y="207.50"></text></g><g><title>victory-archive`std::sys::unix::fs::File::open_c (1 samples, 0.13%)</title><rect x="99.3742%" y="181" width="0.1252%" height="15" fill="rgb(244,70,9)" fg:x="794" fg:w="1"/><text x="99.6242%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.13%)</title><rect x="99.3742%" y="165" width="0.1252%" height="15" fill="rgb(217,125,39)" fg:x="794" fg:w="1"/><text x="99.6242%" y="175.50"></text></g><g><title>dyld`start (798 samples, 99.87%)</title><rect x="0.0000%" y="341" width="99.8748%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="798"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>victory-archive`main (798 samples, 99.87%)</title><rect x="0.0000%" y="325" width="99.8748%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="798"/><text x="0.2500%" y="335.50">victory-archive`main</text></g><g><title>victory-archive`std::rt::lang_start_internal (798 samples, 99.87%)</title><rect x="0.0000%" y="309" width="99.8748%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="798"/><text x="0.2500%" y="319.50">victory-archive`std::rt::lang_start_internal</text></g><g><title>victory-archive`std::rt::lang_start::_{{closure}} (798 samples, 99.87%)</title><rect x="0.0000%" y="293" width="99.8748%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="798"/><text x="0.2500%" y="303.50">victory-archive`std::rt::lang_start::_{{closure}}</text></g><g><title>victory-archive`std::sys_common::backtrace::__rust_begin_short_backtrace (798 samples, 99.87%)</title><rect x="0.0000%" y="277" width="99.8748%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="798"/><text x="0.2500%" y="287.50">victory-archive`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>victory-archive`victory_archive::main (798 samples, 99.87%)</title><rect x="0.0000%" y="261" width="99.8748%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="798"/><text x="0.2500%" y="271.50">victory-archive`victory_archive::main</text></g><g><title>victory-archive`victory_archive::plan::BackupPlan::discover (794 samples, 99.37%)</title><rect x="0.5006%" y="245" width="99.3742%" height="15" fill="rgb(242,14,37)" fg:x="4" fg:w="794"/><text x="0.7506%" y="255.50">victory-archive`victory_archive::plan::BackupPlan::discover</text></g><g><title>victory-archive`victory_archive::batch::FileBatch::save_batch (17 samples, 2.13%)</title><rect x="97.7472%" y="229" width="2.1277%" height="15" fill="rgb(246,228,12)" fg:x="781" fg:w="17"/><text x="97.9972%" y="239.50">v..</text></g><g><title>victory-archive`std::io::Write::write_all (3 samples, 0.38%)</title><rect x="99.4994%" y="213" width="0.3755%" height="15" fill="rgb(213,55,15)" fg:x="795" fg:w="3"/><text x="99.7494%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`write (3 samples, 0.38%)</title><rect x="99.4994%" y="197" width="0.3755%" height="15" fill="rgb(209,9,3)" fg:x="795" fg:w="3"/><text x="99.7494%" y="207.50"></text></g><g><title>all (799 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="799"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.13%)</title><rect x="99.8748%" y="341" width="0.1252%" height="15" fill="rgb(209,121,21)" fg:x="798" fg:w="1"/><text x="100.1248%" y="351.50"></text></g></svg></svg>